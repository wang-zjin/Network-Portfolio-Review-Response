## Clearing Variables and Close Windows
rm(list = ls(all = TRUE))
graphics.off()
## Loading Libraries
libraries = c("mlbench", "alphahull", "igraph", "tripack", "spatstat")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
set.seed(1234)
x            = runif(150)
y            = runif(150)
x            = cbind(x,y)
x            = unique(x)
png("mst_alphas.png", width=900, height=600, bg = "transparent")
par(mfrow=c(1,3))
#minimum spanning tree
graph        = graph.adjacency(as.matrix(dist(x)), weighted=TRUE)
View(x)
# clear cache and close windows
graphics.off()
rm(list = ls(all = TRUE))
# define eight points
eight = cbind(c(-3, -2, -2, -2, 1, 1, 2, 4), c(0, 4, -1, -2, 4, 2, -4, -3))
eight = eight[c(8, 7, 3, 1, 4, 2, 6, 5), ]
# plot eight points according to single linkage algorithm
par(mfrow = c(1,  2))
plot(eight, type = "n", xlab = "price conciousness", ylab = "brand loyalty",
xlim = c(-4, 4),  main="8 points")
segments(eight[1, 1], eight[1, 2 ], eight[2, 1 ], eight[2, 2], lwd = 2)
segments(eight[2, 1], eight[2, 2 ], eight[5, 1 ], eight[5, 2], lwd = 2)
segments(eight[5, 1], eight[5, 2 ], eight[3, 1 ], eight[3, 2], lwd = 2)
segments(eight[3, 1], eight[3, 2 ], eight[4, 1 ], eight[4, 2], lwd = 2)
segments(eight[3, 1], eight[3, 2 ], eight[7, 1 ], eight[7, 2], lwd = 2)
segments(eight[7, 1], eight[7, 2 ], eight[8, 1 ], eight[8, 2], lwd = 2)
segments(eight[8, 1], eight[8, 2 ], eight[6, 1 ], eight[6, 2], lwd = 2)
points(eight,  pch = 21,  cex = 3,  bg = "white")
text(eight, as.character(1:8), col = "red3", xlab = "first coordinate",
ylab = "second coordinate",  main = "8 points", cex = 1.5)
plot(hclust(dist(eight, method = "euclidean")^2, method = "ward"),
ylab = "squared Euclidean distance",  xlab = "", sub = "",
main = "Ward dendrogram")
dev.new()
par(mfrow = c(1,  2), mar = c(2,  4,  4,  2) +  0.1)
plot(hclust(dist(eight, method = "euclidean")^2, method = "single"),
ylab = "squared Euclidean distance", main = "single linkage dendrogram",
xlab = "", sub = "")
plot(hclust(dist(eight, method = "euclidean"), method = "single"),
ylab = "Euclidean distance", main = "single linkage dendrogram", xlab = "",
sub="")
dev.new()
par(mfrow = c(1,  2), mar = c(2,  4,  4,  2) +  0.1)
plot(hclust(dist(eight, method = "euclidean")^2, method = "single"),
ylab = "squared Euclidean distance", main = "single linkage dendrogram",
xlab = "", sub = "")
plot(hclust(dist(eight, method = "euclidean"), method = "single"),
ylab = "Euclidean distance", main = "single linkage dendrogram", xlab = "",
sub="")
rm(list = ls())
library(PerformanceAnalytics)
library(xts)
library(quantmod)
library(timeSeries)
library(xtable)
library(igraph)
library(tcltk2)
library(MTS)
library(matrixcalc)
library(Matrix)
library(fPortfolio)
library(IntroCompFinR)  #install.packages("IntroCompFinR", repos="http://R-Forge.R-project.org")
install.packages("IntroCompFinR", repos="http://R-Forge.R-project.org")
install.packages(c("PerformanceAnalytics", "xts", "quantmod", "timeSeries"))
install.packages("xtable")
install.packages("tcltk2")
install.packages("MST")
install.packages("matrixcalc")
install.packages(c("quadprog", "pracma", "glasso"))
library(PerformanceAnalytics)
library(xts)
library(quantmod)
library(timeSeries)
library(xtable)
library(igraph)
library(tcltk2)
install.packages("XQuartz", repos="www.xquartz.org")
library(tcltk2)
library(tcltk2)
detach("package:tcltk2", unload = TRUE)
library(tcltk)
col.tr <- grDevices::adjustcolor("#557799", alpha=0.7)
plot(x=1:5, y=rep(5,5), pch=19, cex=20, col=col.tr, xlim=c(0,6))
dev.off() # shut off the  graphic device and clears the current configuration.
# Clear your workspace by removing all objects returned by ls():
rm(list = ls())
# Load the 'igraph' library:
library("igraph")
# Read in the data:
nodes <- read.csv("https://kateto.net/workshops/data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("https://kateto.net/workshops/data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
# Examine the data:
head(nodes)
head(links)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# Examine the resulting object:
class(net)
net
# We can access the nodes, edges, and their attributes:
E(net)
V(net)
E(net)$type
V(net)$media
# Or find specific nodes and edges by attribute:
# (that returns objects of type vertex sequence / edge sequence)
V(net)[media=="BBC"]
E(net)[type=="mention"]
# If you need them, you can extract an edge list
# or a matrix back from the igraph networks.
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
net
# Examine the data:
head(nodes)
head(links)
# Or find specific nodes and edges by attribute:
# (that returns objects of type vertex sequence / edge sequence)
V(net)[media=="BBC"]
E(net)[type=="mention"]
# If you need them, you can extract an edge list
# or a matrix back from the igraph networks.
as_edgelist(net, names=T)
# Or data frames describing nodes and edges:
as_data_frame(net, what="edges")
# You can also look at the network matrix directly:
net[1,]
net[5,7]
# Read in the data:
nodes2 <- read.csv("https://kateto.net/workshops/data/Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("https://kateto.net/workshops/data/Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
View(nodes)
View(links2)
# Examine the data:
head(nodes2)
head(links2)
# links2 is a matrix for a two-mode network:
links2 <- as.matrix(links2)
dim(links2)
dim(nodes2)
# Create an igraph network object from the two-mode matrix:
net2 <- graph_from_incidence_matrix(links2)
# A built-in vertex attribute 'type' shows which mode vertices belong to.
table(V(net2)$type)
plot(net2,vertex.label=NA)
# Examine the resulting object:
class(net2)
net2
# Check out the node options (starting with 'vertex.')
# and the edge options # (starting with 'edge.').
# A list of options is also included in your handout.
?igraph.plotting
# Plot with curved edges (edge.curved=.1) and reduce arrow size:
plot(net, edge.arrow.size=.4, edge.curved=.1)
# Set node color to orange and the border color to hex #555555
# Replace the vertex label with the node names stored in "media"
plot(net, edge.arrow.size=.2, edge.curved=0,
vertex.color="orange", vertex.frame.color="#555555",
vertex.label=V(net)$media, vertex.label.color="black",
vertex.label.cex=.7)
# Generate colors based on media type:
colrs <- c("gray50", "tomato", "gold")
V(net)$media.type
V(net)$color <- colrs[V(net)$media.type]
class(net)
View(links)
install.packages("sde")
install.packages("rugarch")
View(links2)
seq(0.02,by=0.05,length=10)
c(seq(0.02,by=0.05,length=10),seq(0.5,by=0.2,length=15))
install.packages("locpol", lib="/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
x=seq(0,0.01,2)
x
x=seq(0,2,0.01)
x
y=sin(x)
y
df=data.frame(Ivp=y,IvpSTD=x)
IVsurf=locpol(Ivp~IvpSTD,data=df,bw=0.02,xevalLen=length(x))
library(locpol, lib.loc = "/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
IVsurf=locpol(Ivp~IvpSTD,data=df,bw=0.02,xevalLen=length(x))
IVsurf$lpFit
IVsurf$mf
View(df)
IVsurf$lpFit
IVsurf$data
IVsurf$mf
IVsurf$weig
IVsurf$xeval
IVsurf$bw
IVsurf$kernel()
IVsurf$kernel
IVsurf$residuals
x=seq(0,4,0.01)
y=sin(x)
df=data.frame(lvpSTD=x,lvp=y)
IVsurf=locpol(Ivp~IvpSTD,data=df,bw=0.01,xevalLen=length(x))
df=data.frame(IvpSTD=x,Ivp=y)
IVsurf=locpol(Ivp~IvpSTD,data=df,bw=0.01,xevalLen=length(x))
IVsurf=locpol(Ivp~IvpSTD,data=df,bw=0.02,xevalLen=length(x))
IVsurf$residuals
IVsurf$deg
r_t_s<-log(sp500['2010/2019'][,3])-log(sp500['2010/2019'][,1])
library(dccmidas)
require(xts)
r_t_s<-log(sp500['2010/2019'][,3])-log(sp500['2010/2019'][,1])
r_t_n<-log(nasdaq['2010/2019'][,3])-log(nasdaq['2010/2019'][,1])
r_t_f<-log(ftse100['2010/2019'][,3])-log(ftse100['2010/2019'][,1])
db_m<-merge.xts(r_t_s,r_t_d,r_t_f,r_t_n)
db_m<-merge.xts(r_t_s,r_t_n,r_t_f)
db_m<-merge.xts(r_t_s,r_t_n,r_t_f)
db_m<-db_m[complete.cases(db_m),]
colnames(db_m)<-c("S&P500","NASDAQ","FTSE100")
# list of returns
r_t<-list(db_m[,1],db_m[,2],db_m[,3])
# estimation
K_c<-144
N_c<-36
cdcc_est<-dcc_fit(r_t,univ_model="sGARCH",distribution="norm",
corr_model="DCCMIDAS",N_c=N_c,K_c=K_c)
cov_eval(cdcc_est$H_t,r_t=r_t)[(K_c+1):dim(cdcc_est$H_t)[3]]
dim(cdcc_est$H_t)
cdcc_est$assets
cdcc_est$model
cdcc_est$est_univ_model
cdcc_est$corr_coef_mat
cdcc_est$mult_model
cdcc_est$obs
cdcc_est$period
cdcc_est$H_t
cdcc_est$R_t
cdcc_est$R_t_bar
cdcc_est$est_time
cdcc_est$Days
cdcc_est$llk
# open to close daily log-returns
r_t_s<-log(sp500['2005/2008'][,3])-log(sp500['2005/2008'][,1])
r_t_n<-log(nasdaq['2005/2008'][,3])-log(nasdaq['2005/2008'][,1])
r_t_f<-log(ftse100['2005/2008'][,3])-log(ftse100['2005/2008'][,1])
db_m<-merge.xts(r_t_s,r_t_n,r_t_f)
db_m<-db_m[complete.cases(db_m),]
colnames(db_m)<-c("S&P500","NASDAQ","FTSE100")
# list of returns
r_t<-list(db_m[,1],db_m[,2],db_m[,3])
# MV transformation (same MV for all the stocks)
require(rumidas)
indpro
?mv_into_mat
diff(indpro)
indpro
mv_m<-mv_into_mat(r_t[[1]],diff(indpro),K=12,"monthly")
mv_m
# list of MV
MV<-list(mv_m,mv_m,mv_m)
# estimation
K_c<-144
N_c<-36
dccmidas_est<-dcc_fit(r_t,univ_model="GM_noskew",distribution="norm",
MV=MV,K=12,corr_model="DCCMIDAS",N_c=N_c,K_c=K_c)
dccmidas_est
summary.dccmidas(dccmidas_est)
sample(1:25,25,replace=TRUE)
matrix(sample(1:25,25,replace=TRUE),ncol=5)
##### Example of Det ######
x<-matrix(sample(1:25,25,replace=TRUE),ncol=5)
Det(x)
data(ftse100)
##### Example of plot_dccmidas #####
require(xts)
# open to close daily log-returns
r_t_s<-log(sp500['2010/2019'][,3])-log(sp500['2010/2019'][,1])
r_t_n<-log(nasdaq['2010/2019'][,3])-log(nasdaq['2010/2019'][,1])
##### Example of plot_dccmidas #####
require(xts)
# open to close daily log-returns
r_t_s<-log(sp500['2010/2019'][,3])-log(sp500['2010/2019'][,1])
sp500['2010/2019']
##### Example of plot_dccmidas #####
require(xts)
# open to close daily log-returns
r_t_s<-log(sp500['2010/2019'][,3])-log(sp500['2010/2019'][,1])
# We want to adjust the window size, make it 375, 500, 750, 1000
setwd("~/Documents/GitHub/Network-Portfolio/RR_Hyperparameter_Calibration")
# Load Functions and other Files
source('./PackagesNetworkPortfolio.R')
source('./FunctionsNetworkPortfolio.R')
estimate_glasso_rho_portfolio_parameter(file_name = "SP500 securities_up_20230306.csv", window_size=375)
