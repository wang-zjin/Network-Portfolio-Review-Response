return_meanVar_glasso <- Portfolio.Scenario$return_meanVar_glasso
return_equal <- Portfolio.Scenario$return_equal
return_network_1constraint <- Portfolio.Scenario$return_network_1constraint
return_network_1constraint_Dantzig <- Portfolio.Scenario$return_network_1constraint_Dantzig
return_network_1constraint_glasso <- Portfolio.Scenario$return_network_1constraint_glasso
return_network_1constraint_noshort <- Portfolio.Scenario$return_network_1constraint_noshort
return_network_vary_with_phi <- Portfolio.Scenario$return_network_vary_with_phi
return_network_vary_with_phi_Dantzig <- Portfolio.Scenario$return_network_vary_with_phi_Dantzig
return_network_vary_with_phi_glasso <- Portfolio.Scenario$return_network_vary_with_phi_glasso
return_network_vary_with_phi_noshort <- Portfolio.Scenario$return_network_vary_with_phi_noshort
return_network_datadriven_phistar <- Portfolio.Scenario$return_network_datadriven_phistar
return_network_datadriven_phistar_Dantzig <- Portfolio.Scenario$return_network_datadriven_phistar_Dantzig
return_network_datadriven_phistar_glasso <- Portfolio.Scenario$return_network_datadriven_phistar_glasso
return_network_datadriven_phistar_noshort <- Portfolio.Scenario$return_network_datadriven_phistar_noshort
return_network_2constraint <- Portfolio.Scenario$return_network_2constraint
return_network_2constraint_Dantzig <- Portfolio.Scenario$return_network_2constraint_Dantzig
return_network_2constraint_glasso <- Portfolio.Scenario$return_network_2constraint_glasso
return_network_2constraint_noshort <- Portfolio.Scenario$return_network_2constraint_noshort
return_network_vary_with_phi_2constraint <- Portfolio.Scenario$return_network_vary_with_phi_2constraint
return_network_vary_with_phi_2constraint_Dantzig <- Portfolio.Scenario$return_network_vary_with_phi_2constraint_Dantzig
return_network_vary_with_phi_2constraint_glasso <- Portfolio.Scenario$return_network_vary_with_phi_2constraint_glasso
return_network_vary_with_phi_2constraint_noshort <- Portfolio.Scenario$return_network_vary_with_phi_2constraint_noshort
return_network_datadriven_phistar_2constraint <- Portfolio.Scenario$return_network_datadriven_phistar_2constraint
return_network_datadriven_phistar_2constraint_Dantzig <- Portfolio.Scenario$return_network_datadriven_phistar_2constraint_Dantzig
return_network_datadriven_phistar_2constraint_glasso <- Portfolio.Scenario$return_network_datadriven_phistar_2constraint_glasso
return_network_datadriven_phistar_2constraint_noshort <- Portfolio.Scenario$return_network_datadriven_phistar_2constraint_noshort
cumureturn_minVar <- Portfolio.Scenario$cumureturn_minVar
cumureturn_minVar_noshort <- Portfolio.Scenario$cumureturn_minVar_noshort
cumureturn_minVar_Dantzig <- Portfolio.Scenario$cumureturn_minVar_Dantzig
cumureturn_minVar_glasso <- Portfolio.Scenario$cumureturn_minVar_glasso
cumureturn_meanVar <- Portfolio.Scenario$cumureturn_meanVar
cumureturn_meanVar_noshort <- Portfolio.Scenario$cumureturn_meanVar_noshort
cumureturn_meanVar_Dantzig <- Portfolio.Scenario$cumureturn_meanVar_Dantzig
cumureturn_meanVar_glasso <- Portfolio.Scenario$cumureturn_meanVar_glasso
cumureturn_equal <- Portfolio.Scenario$cumureturn_equal
cumureturn_network_1constraint <- Portfolio.Scenario$cumureturn_network_1constraint
cumureturn_network_1constraint_Dantzig <- Portfolio.Scenario$cumureturn_network_1constraint_Dantzig
cumureturn_network_1constraint_glasso <- Portfolio.Scenario$cumureturn_network_1constraint_glasso
cumureturn_network_1constraint_noshort <- Portfolio.Scenario$cumureturn_network_1constraint_noshort
cumureturn_network_vary_with_phi <- Portfolio.Scenario$cumureturn_network_vary_with_phi
cumureturn_network_vary_with_phi_Dantzig <- Portfolio.Scenario$cumureturn_network_vary_with_phi_Dantzig
cumureturn_network_vary_with_phi_glasso <- Portfolio.Scenario$cumureturn_network_vary_with_phi_glasso
cumureturn_network_vary_with_phi_noshort <- Portfolio.Scenario$cumureturn_network_vary_with_phi_noshort
cumureturn_network_datadriven_phistar <- Portfolio.Scenario$cumureturn_network_datadriven_phistar
cumureturn_network_datadriven_phistar_Dantzig <- Portfolio.Scenario$cumureturn_network_datadriven_phistar_Dantzig
cumureturn_network_datadriven_phistar_glasso <- Portfolio.Scenario$cumureturn_network_datadriven_phistar_glasso
cumureturn_network_datadriven_phistar_noshort <- Portfolio.Scenario$cumureturn_network_datadriven_phistar_noshort
cumureturn_network_2constraint <- Portfolio.Scenario$cumureturn_network_2constraint
cumureturn_network_2constraint_Dantzig <- Portfolio.Scenario$cumureturn_network_2constraint_Dantzig
cumureturn_network_2constraint_glasso <- Portfolio.Scenario$cumureturn_network_2constraint_glasso
cumureturn_network_2constraint_noshort <- Portfolio.Scenario$cumureturn_network_2constraint_noshort
cumureturn_network_vary_with_phi_2constraint <- Portfolio.Scenario$cumureturn_network_vary_with_phi_2constraint
cumureturn_network_vary_with_phi_2constraint_Dantzig <- Portfolio.Scenario$cumureturn_network_vary_with_phi_2constraint_Dantzig
cumureturn_network_vary_with_phi_2constraint_glasso <- Portfolio.Scenario$cumureturn_network_vary_with_phi_2constraint_glasso
cumureturn_network_vary_with_phi_2constraint_noshort <- Portfolio.Scenario$cumureturn_network_vary_with_phi_2constraint_noshort
cumureturn_network_datadriven_phistar_2constraint <- Portfolio.Scenario$cumureturn_network_datadriven_phistar_2constraint
cumureturn_network_datadriven_phistar_2constraint_Dantzig <- Portfolio.Scenario$cumureturn_network_datadriven_phistar_2constraint_Dantzig
cumureturn_network_datadriven_phistar_2constraint_glasso <- Portfolio.Scenario$cumureturn_network_datadriven_phistar_2constraint_glasso
cumureturn_network_datadriven_phistar_2constraint_noshort <- Portfolio.Scenario$cumureturn_network_datadriven_phistar_2constraint_noshort
w_minVar <- Portfolio.Scenario$w_minVar
w_minVar_noshort <- Portfolio.Scenario$w_minVar_noshort
w_minVar_Dantzig <- Portfolio.Scenario$w_minVar_Dantzig
w_minVar_glasso <- Portfolio.Scenario$w_minVar_glasso
w_meanVar <- Portfolio.Scenario$w_meanVar
w_meanVar_noshort <- Portfolio.Scenario$w_meanVar_noshort
w_meanVar_Dantzig <- Portfolio.Scenario$w_meanVar_Dantzig
w_meanVar_glasso <- Portfolio.Scenario$w_meanVar_glasso
w_equal <- Portfolio.Scenario$w_equal
w_network_1constraint <- Portfolio.Scenario$w_network_1constraint
w_network_1constraint_Dantzig <- Portfolio.Scenario$w_network_1constraint_Dantzig
w_network_1constraint_noshort <- Portfolio.Scenario$w_network_1constraint_noshort
w_network_1constraint_glasso <- Portfolio.Scenario$w_network_1constraint_glasso
w_network_vary_with_phi <- Portfolio.Scenario$w_network_vary_with_phi
w_network_vary_with_phi_Dantzig <- Portfolio.Scenario$w_network_vary_with_phi_Dantzig
w_network_vary_with_phi_glasso <- Portfolio.Scenario$w_network_vary_with_phi_glasso
w_network_vary_with_phi_noshort <- Portfolio.Scenario$w_network_vary_with_phi_noshort
w_network_datadriven_phistar <- Portfolio.Scenario$w_network_datadriven_phistar
w_network_datadriven_phistar_Dantzig <- Portfolio.Scenario$w_network_datadriven_phistar_Dantzig
w_network_datadriven_phistar_glasso <- Portfolio.Scenario$w_network_datadriven_phistar_glasso
w_network_datadriven_phistar_noshort <- Portfolio.Scenario$w_network_datadriven_phistar_noshort
w_network_2constraint <- Portfolio.Scenario$w_network_2constraint
w_network_2constraint_Dantzig <- Portfolio.Scenario$w_network_2constraint_Dantzig
w_network_2constraint_glasso <- Portfolio.Scenario$w_network_2constraint_glasso
w_network_2constraint_noshort <- Portfolio.Scenario$w_network_2constraint_noshort
w_network_vary_with_phi_2constraint <- Portfolio.Scenario$w_network_vary_with_phi_2constraint
w_network_vary_with_phi_2constraint_Dantzig <- Portfolio.Scenario$w_network_vary_with_phi_2constraint_Dantzig
w_network_vary_with_phi_2constraint_glasso <- Portfolio.Scenario$w_network_vary_with_phi_2constraint_glasso
w_network_vary_with_phi_2constraint_noshort <- Portfolio.Scenario$w_network_vary_with_phi_2constraint_noshort
w_network_datadriven_phistar_2constraint <- Portfolio.Scenario$w_network_datadriven_phistar_2constraint
w_network_datadriven_phistar_2constraint_Dantzig <- Portfolio.Scenario$w_network_datadriven_phistar_2constraint_Dantzig
w_network_datadriven_phistar_2constraint_glasso <- Portfolio.Scenario$w_network_datadriven_phistar_2constraint_glasso
w_network_datadriven_phistar_2constraint_noshort <- Portfolio.Scenario$w_network_datadriven_phistar_2constraint_noshort
n=length(return_equal)
#### Figures output ####
##### P_phi using Plug-in #####
### phi* = 10% - 90% quantile ###
Colors_Ret<-rainbow(12)
CumRet<-zoo(cbind(data.frame(cumureturn_network_vary_with_phi[[1]]),
data.frame(cumureturn_network_vary_with_phi[[2]]),
data.frame(cumureturn_network_vary_with_phi[[3]]),
data.frame(cumureturn_network_vary_with_phi[[4]]),
data.frame(cumureturn_network_vary_with_phi[[5]]),
data.frame(cumureturn_network_vary_with_phi[[6]]),
data.frame(cumureturn_network_vary_with_phi[[7]]),
data.frame(cumureturn_network_vary_with_phi[[8]]),
data.frame(cumureturn_network_vary_with_phi[[9]])
),
order.by=as.Date(as.character(date), format="%Y-%m-%d"))
pngname<-paste0(getwd(),"/portfolio_comparison/cumulative_return_P_phi_PlugIn",".png")
png(file = pngname, width=750, height=600, bg = "transparent")
plot(CumRet, screens=1, col=Colors_Ret[1:12], ylab="", xlab="")
legend("topleft",legend=c(paste0("P_phi ",quantl[1]*100,"% quantile Plug-in"),
paste0("P_phi ",quantl[2]*100,"% quantile Plug-in"),
paste0("P_phi ",quantl[3]*100,"% quantile Plug-in"),
paste0("P_phi ",quantl[4]*100,"% quantile Plug-in"),
paste0("P_phi ",quantl[5]*100,"% quantile Plug-in"),
paste0("P_phi ",quantl[6]*100,"% quantile Plug-in"),
paste0("P_phi ",quantl[7]*100,"% quantile Plug-in"),
paste0("P_phi ",quantl[8]*100,"% quantile Plug-in"),
paste0("P_phi ",quantl[9]*100,"% quantile Plug-in") ), col=Colors_Ret[1:12], lty=1, cex=0.8)
dev.off()
##### P_phi using Dantzig #####
### phi* = 10% - 90% quantile ###
Colors_Ret<-rainbow(12)
CumRet<-zoo(cbind(data.frame(cumureturn_network_vary_with_phi_Dantzig[[1]]),
data.frame(cumureturn_network_vary_with_phi_Dantzig[[2]]),
data.frame(cumureturn_network_vary_with_phi_Dantzig[[3]]),
data.frame(cumureturn_network_vary_with_phi_Dantzig[[4]]),
data.frame(cumureturn_network_vary_with_phi_Dantzig[[5]]),
data.frame(cumureturn_network_vary_with_phi_Dantzig[[6]]),
data.frame(cumureturn_network_vary_with_phi_Dantzig[[7]]),
data.frame(cumureturn_network_vary_with_phi_Dantzig[[8]]),
data.frame(cumureturn_network_vary_with_phi_Dantzig[[9]])
),
order.by=as.Date(as.character(date), format="%Y-%m-%d"))
pngname<-paste0(getwd(),"/portfolio_comparison/cumulative_return_P_phi_Dantzig",".png")
png(file = pngname, width=750, height=600, bg = "transparent")
plot(CumRet, screens=1, col=Colors_Ret[1:12], ylab="", xlab="")
legend("topleft",legend=c(paste0("P_phi ",quantl[1]*100,"% quantile Dantzig"),
paste0("P_phi ",quantl[2]*100,"% quantile Dantzig"),
paste0("P_phi ",quantl[3]*100,"% quantile Dantzig"),
paste0("P_phi ",quantl[4]*100,"% quantile Dantzig"),
paste0("P_phi ",quantl[5]*100,"% quantile Dantzig"),
paste0("P_phi ",quantl[6]*100,"% quantile Dantzig"),
paste0("P_phi ",quantl[7]*100,"% quantile Dantzig"),
paste0("P_phi ",quantl[8]*100,"% quantile Dantzig"),
paste0("P_phi ",quantl[9]*100,"% quantile Dantzig") ),
col=Colors_Ret[1:12], lty=1, cex=0.8)
dev.off()
##### P_phi using glasso #####
### phi* = 10% - 90% quantile ###
Colors_Ret<-rainbow(12)
CumRet<-zoo(cbind(data.frame(cumureturn_network_vary_with_phi_glasso[[1]]),
data.frame(cumureturn_network_vary_with_phi_glasso[[2]]),
data.frame(cumureturn_network_vary_with_phi_glasso[[3]]),
data.frame(cumureturn_network_vary_with_phi_glasso[[4]]),
data.frame(cumureturn_network_vary_with_phi_glasso[[5]]),
data.frame(cumureturn_network_vary_with_phi_glasso[[6]]),
data.frame(cumureturn_network_vary_with_phi_glasso[[7]]),
data.frame(cumureturn_network_vary_with_phi_glasso[[8]]),
data.frame(cumureturn_network_vary_with_phi_glasso[[9]])
),
order.by=as.Date(as.character(date), format="%Y-%m-%d"))
pngname<-paste0(getwd(),"/portfolio_comparison/cumulative_return_P_phi_glasso",".png")
png(file = pngname, width=750, height=600, bg = "transparent")
plot(CumRet, screens=1, col=Colors_Ret[1:12], ylab="", xlab="")
legend("topleft",legend=c(paste0("P_phi ",quantl[1]*100,"% quantile glasso"),
paste0("P_phi ",quantl[2]*100,"% quantile glasso"),
paste0("P_phi ",quantl[3]*100,"% quantile glasso"),
paste0("P_phi ",quantl[4]*100,"% quantile glasso"),
paste0("P_phi ",quantl[5]*100,"% quantile glasso"),
paste0("P_phi ",quantl[6]*100,"% quantile glasso"),
paste0("P_phi ",quantl[7]*100,"% quantile glasso"),
paste0("P_phi ",quantl[8]*100,"% quantile glasso"),
paste0("P_phi ",quantl[9]*100,"% quantile glasso") ),
col=Colors_Ret[1:12], lty=1, cex=0.8)
dev.off()
##### GMV, MV, EW, best Plug-In, best Dantzig, best glasso #####
### best Plug-In : 60% quantile ###
### best Dantzig : 30% quantile ###
### best glasso : 30% quantile ###
Colors_Ret<-rainbow(6)
CumRet<-zoo(cbind(data.frame(cumureturn_minVar),
data.frame(cumureturn_meanVar),
data.frame(cumureturn_equal),
data.frame(cumureturn_network_vary_with_phi[[9]]),
data.frame(cumureturn_network_vary_with_phi_Dantzig[[1]]),
data.frame(cumureturn_network_vary_with_phi_glasso[[1]]) ),
order.by=as.Date(as.character(date), format="%Y-%m-%d"))
pngname<-paste0(getwd(),"/portfolio_comparison/GMV_MV_EW_PlugIn_Dantzig_glasso",".png")
png(file = pngname, width=750, height=600, bg = "transparent")
plot(CumRet, screens=1, col=Colors_Ret, ylab="", xlab="")
legend("topleft",legend=c("GMV",
"MV",
"EW",
"Plug-In", "Dantzig", "glasso"),
col=Colors_Ret, lty=1, cex=0.8)
dev.off()
##### Weights distribution
for (i in 1:9) {
df = as.data.frame(w_network_vary_with_phi[[i]])
df$time = as.Date(as.character(date_monthly), format="%Y-%m-%d")
df_long <- df %>%
gather(key = "variable", value="weight",-time)
df_stats <- df_long %>%
group_by(time) %>%
summarise(min=min(weight),
max=max(weight),
q1=quantile(weight,0.25),
q3=quantile(weight,0.75),
avg_nonzero = mean(weight[weight!=0]))
avg_line <- data.frame(
time = df_stats$time,
weight = df_stats$avg_nonzero,
type = factor("Mean Non-Zero",levels = c("Min, Max", "25%, 75%", "Mean Non-Zero"))
)
# Create a data frame for the max and min regions
regions <- data.frame(
time = df_stats$time,
ymin = df_stats$min,
ymax = df_stats$max,
type = c("(Min, Max)")
)
# Create the plot
p <- ggplot() +
geom_ribbon(data = regions, aes(x = time, ymin = ymin, ymax = ymax, fill = type), alpha = 0.5) +
geom_line(data = avg_line, aes(x = time, y = weight, color = type), size = 1) +
theme_minimal() +
labs(color = "", fill = "",y="Distribution of weights",x="Time") +
scale_fill_manual(values = c("(Min, Max)" = "grey30", "Mean Non-Zero" = "red"))+
theme(legend.position = "bottom",
axis.title.x = element_text(size = 15),axis.title.y = element_text(size = 15),
legend.text = element_text(size = 12))
ggsave(paste0(getwd(),"/weight_ribbon/PlugIn_1_constraint_network_",i,"_.png"), p, width=18, height=7, bg = "transparent")
}
for (i in 1:9) {
df = as.data.frame(w_network_vary_with_phi_Dantzig[[i]])
df$time = as.Date(as.character(date_monthly), format="%Y-%m-%d")
df_long <- df %>%
gather(key = "variable", value="weight",-time)
df_stats <- df_long %>%
group_by(time) %>%
summarise(min=min(weight),
max=max(weight),
q1=quantile(weight,0.25),
q3=quantile(weight,0.75),
avg_nonzero = mean(weight[weight!=0]))
avg_line <- data.frame(
time = df_stats$time,
weight = df_stats$avg_nonzero,
type = factor("Mean Non-Zero",levels = c("Min, Max", "25%, 75%", "Mean Non-Zero"))
)
# Create a data frame for the max and min regions
regions <- data.frame(
time = df_stats$time,
ymin = df_stats$min,
ymax = df_stats$max,
type = c("(Min, Max)")
)
# Create the plot
p <- ggplot() +
geom_ribbon(data = regions, aes(x = time, ymin = ymin, ymax = ymax, fill = type), alpha = 0.5) +
geom_line(data = avg_line, aes(x = time, y = weight, color = type), size = 1) +
theme_minimal() +
labs(color = "", fill = "",y="Distribution of weights",x="Time") +
scale_fill_manual(values = c("(Min, Max)" = "grey30", "Mean Non-Zero" = "red"))+
theme(legend.position = "bottom",
axis.title.x = element_text(size = 15),axis.title.y = element_text(size = 15),
legend.text = element_text(size = 12))
ggsave(paste0(getwd(),"/weight_ribbon/Dantzig_1_constraint_network_",i,"_.png"), p, width=18, height=7, bg = "transparent")
}
for (i in 1:9) {
df = as.data.frame(w_network_vary_with_phi_glasso[[i]])
df$time = as.Date(as.character(date_monthly), format="%Y-%m-%d")
df_long <- df %>%
gather(key = "variable", value="weight",-time)
df_stats <- df_long %>%
group_by(time) %>%
summarise(min=min(weight),
max=max(weight),
q1=quantile(weight,0.25),
q3=quantile(weight,0.75),
avg_nonzero = mean(weight[weight!=0]))
avg_line <- data.frame(
time = df_stats$time,
weight = df_stats$avg_nonzero,
type = factor("Mean Non-Zero",levels = c("Min, Max", "25%, 75%", "Mean Non-Zero"))
)
# Create a data frame for the max and min regions
regions <- data.frame(
time = df_stats$time,
ymin = df_stats$min,
ymax = df_stats$max,
type = c("(Min, Max)")
)
# Create the plot
p <- ggplot() +
geom_ribbon(data = regions, aes(x = time, ymin = ymin, ymax = ymax, fill = type), alpha = 0.5) +
geom_line(data = avg_line, aes(x = time, y = weight, color = type), size = 1) +
theme_minimal() +
labs(color = "", fill = "",y="Distribution of weights",x="Time") +
scale_fill_manual(values = c("(Min, Max)" = "grey30", "Mean Non-Zero" = "red"))+
theme(legend.position = "bottom",
axis.title.x = element_text(size = 15),axis.title.y = element_text(size = 15),
legend.text = element_text(size = 12))
ggsave(paste0(getwd(),"/weight_ribbon/GLASSO_1_constraint_network_",i,"_.png"), p, width=18, height=7, bg = "transparent")
}
for (i in 1:9) {
df = as.data.frame(w_network_vary_with_phi_2constraint[[i]])
df$time = as.Date(as.character(date_monthly), format="%Y-%m-%d")
df_long <- df %>%
gather(key = "variable", value="weight",-time)
df_stats <- df_long %>%
group_by(time) %>%
summarise(min=min(weight),
max=max(weight),
q1=quantile(weight,0.25),
q3=quantile(weight,0.75),
avg_nonzero = mean(weight[weight!=0]))
avg_line <- data.frame(
time = df_stats$time,
weight = df_stats$avg_nonzero,
type = factor("Mean Non-Zero",levels = c("Min, Max", "25%, 75%", "Mean Non-Zero"))
)
# Create a data frame for the max and min regions
regions <- data.frame(
time = df_stats$time,
ymin = df_stats$min,
ymax = df_stats$max,
type = c("(Min, Max)")
)
# Create the plot
p <- ggplot() +
geom_ribbon(data = regions, aes(x = time, ymin = ymin, ymax = ymax, fill = type), alpha = 0.5) +
geom_line(data = avg_line, aes(x = time, y = weight, color = type), size = 1) +
theme_minimal() +
labs(color = "", fill = "",y="Distribution of weights",x="Time") +
scale_fill_manual(values = c("(Min, Max)" = "grey30", "Mean Non-Zero" = "red"))+
theme(legend.position = "bottom",
axis.title.x = element_text(size = 15),axis.title.y = element_text(size = 15),
legend.text = element_text(size = 12))
ggsave(paste0(getwd(),"/weight_ribbon/PlugIn_2_constraint_network_",i,"_.png"), p, width=18, height=7, bg = "transparent")
}
for (i in 1:9) {
df = as.data.frame(w_network_vary_with_phi_2constraint_Dantzig[[i]])
df$time = as.Date(as.character(date_monthly), format="%Y-%m-%d")
df_long <- df %>%
gather(key = "variable", value="weight",-time)
df_stats <- df_long %>%
group_by(time) %>%
summarise(min=min(weight),
max=max(weight),
q1=quantile(weight,0.25),
q3=quantile(weight,0.75),
avg_nonzero = mean(weight[weight!=0]))
avg_line <- data.frame(
time = df_stats$time,
weight = df_stats$avg_nonzero,
type = factor("Mean Non-Zero",levels = c("Min, Max", "25%, 75%", "Mean Non-Zero"))
)
# Create a data frame for the max and min regions
regions <- data.frame(
time = df_stats$time,
ymin = df_stats$min,
ymax = df_stats$max,
type = c("(Min, Max)")
)
# Create the plot
p <- ggplot() +
geom_ribbon(data = regions, aes(x = time, ymin = ymin, ymax = ymax, fill = type), alpha = 0.5) +
geom_line(data = avg_line, aes(x = time, y = weight, color = type), size = 1) +
theme_minimal() +
labs(color = "", fill = "",y="Distribution of weights",x="Time") +
scale_fill_manual(values = c("(Min, Max)" = "grey30", "Mean Non-Zero" = "red"))+
theme(legend.position = "bottom",
axis.title.x = element_text(size = 15),axis.title.y = element_text(size = 15),
legend.text = element_text(size = 12))
ggsave(paste0(getwd(),"/weight_ribbon/Dantzig_2_constraint_network_",i,"_.png"), p, width=18, height=7, bg = "transparent")
}
for (i in 1:9) {
df = as.data.frame(w_network_vary_with_phi_2constraint_glasso[[i]])
df$time = as.Date(as.character(date_monthly), format="%Y-%m-%d")
df_long <- df %>%
gather(key = "variable", value="weight",-time)
df_stats <- df_long %>%
group_by(time) %>%
summarise(min=min(weight),
max=max(weight),
q1=quantile(weight,0.25),
q3=quantile(weight,0.75),
avg_nonzero = mean(weight[weight!=0]))
avg_line <- data.frame(
time = df_stats$time,
weight = df_stats$avg_nonzero,
type = factor("Mean Non-Zero",levels = c("Min, Max", "25%, 75%", "Mean Non-Zero"))
)
# Create a data frame for the max and min regions
regions <- data.frame(
time = df_stats$time,
ymin = df_stats$min,
ymax = df_stats$max,
type = c("(Min, Max)")
)
# Create the plot
p <- ggplot() +
geom_ribbon(data = regions, aes(x = time, ymin = ymin, ymax = ymax, fill = type), alpha = 0.5) +
geom_line(data = avg_line, aes(x = time, y = weight, color = type), size = 1) +
theme_minimal() +
labs(color = "", fill = "",y="Distribution of weights",x="Time") +
scale_fill_manual(values = c("(Min, Max)" = "grey30", "Mean Non-Zero" = "red"))+
theme(legend.position = "bottom",
axis.title.x = element_text(size = 15),axis.title.y = element_text(size = 15),
legend.text = element_text(size = 12))
ggsave(paste0(getwd(),"/weight_ribbon/GLASSO_2_constraint_network_",i,"_.png"), p, width=18, height=7, bg = "transparent")
}
#### Negative weights ####
nega.weights.plugin=c()
for (t in 1:61) {
nega.weights.plugin[t]=sum(w_network_vary_with_phi[[1]][t,]<0)
}
negative_weights<-zoo(data.frame(nega.weights.plugin),
order.by=as.Date(as.character(date_monthly), format="%Y-%m-%d"))
pngname<-paste0(getwd(),"/nega_weight/PlugIn_1_constraint_network_",1,"_lastday_.png")
png(file = pngname, width=900, height=350, bg = "transparent")
plot(negative_weights, xlab = "Time", ylab = "Number of negative weights")
# axis(1,cex.axis = 3)
dev.off()
nega.weights.Dantzig=c()
for (t in 1:61) {
nega.weights.Dantzig[t]=sum(w_network_vary_with_phi_Dantzig[[1]][t,]<0)
}
negative_weights<-zoo(data.frame(nega.weights.Dantzig),
order.by=as.Date(as.character(date_monthly), format="%Y-%m-%d"))
pngname<-paste0(getwd(),"/nega_weight/Dantzig_1_constraint_network_",1,"_lastday_.png")
png(file = pngname, width=900, height=350, bg = "transparent")
plot(negative_weights, xlab = "Time", ylab = "Number of negative weights")
dev.off()
nega.weights.glasso=c()
for (t in 1:61) {
nega.weights.glasso[t]=sum(w_network_vary_with_phi_glasso[[1]][t,]<0)
}
negative_weights<-zoo(data.frame(nega.weights.glasso),
order.by=as.Date(as.character(date_monthly), format="%Y-%m-%d"))
pngname<-paste0(getwd(),"/nega_weight/glasso_1_constraint_network_",1,"_lastday_.png")
png(file = pngname, width=900, height=350, bg = "transparent")
plot(negative_weights, xlab = "Time", ylab = "Number of negative weights")
dev.off()
nega.weights.plugin.2constraint=c()
for (t in 1:61) {
nega.weights.plugin.2constraint[t]=sum(w_network_vary_with_phi_2constraint[[1]][t,]<0)
}
negative_weights<-zoo(data.frame(nega.weights.plugin.2constraint),
order.by=as.Date(as.character(date_monthly), format="%Y-%m-%d"))
pngname<-paste0(getwd(),"/nega_weight/PlugIn_2_constraint_network_",1,"_lastday_.png")
png(file = pngname, width=900, height=350, bg = "transparent")
plot(negative_weights, xlab = "Time", ylab = "Number of negative weights")
# axis(1,cex.axis = 3)
dev.off()
nega.weights.Dantzig.2constraint=c()
for (t in 1:61) {
nega.weights.Dantzig.2constraint[t]=sum(w_network_vary_with_phi_2constraint_Dantzig[[1]][t,]<0)
}
negative_weights<-zoo(data.frame(nega.weights.Dantzig.2constraint),
order.by=as.Date(as.character(date_monthly), format="%Y-%m-%d"))
pngname<-paste0(getwd(),"/nega_weight/Dantzig_2_constraint_network_",1,"_lastday_.png")
png(file = pngname, width=900, height=350, bg = "transparent")
plot(negative_weights, xlab = "Time", ylab = "Number of negative weights")
dev.off()
nega.weights.glasso.2constraint=c()
for (t in 1:61) {
nega.weights.glasso.2constraint[t]=sum(w_network_vary_with_phi_2constraint_glasso[[1]][t,]<0)
}
negative_weights<-zoo(data.frame(nega.weights.glasso.2constraint),
order.by=as.Date(as.character(date_monthly), format="%Y-%m-%d"))
pngname<-paste0(getwd(),"/nega_weight/glasso_2_constraint_network_",1,"_lastday_.png")
png(file = pngname, width=900, height=350, bg = "transparent")
plot(negative_weights, xlab = "Time", ylab = "Number of negative weights")
dev.off()
#### magnitude of negative weights ####
magntd.nega.weights=c()
for (t in 1:61) {
weights=w_network_vary_with_phi[[1]][t,]
magntd.nega.weights[t]=sum(abs(weights[which(weights<0)]))/sum(abs(weights))
}
magnitude_negative_weights<-zoo(data.frame(magntd.nega.weights),
order.by=as.Date(as.character(date_monthly), format="%Y-%m-%d"))
pngname<-paste0(getwd(),"/magnitude_nega_weight/PlugIn_1_constraint_network_",1,"_lastday_.png")
png(file = pngname, width=900, height=350, bg = "transparent")
plot(magnitude_negative_weights)
dev.off()
magntd.nega.weights=c()
for (t in 1:61) {
weights=w_network_vary_with_phi_Dantzig[[1]][t,]
magntd.nega.weights[t]=sum(abs(weights[which(weights<0)]))/sum(abs(weights))
}
magnitude_negative_weights<-zoo(data.frame(magntd.nega.weights),
order.by=as.Date(as.character(date_monthly), format="%Y-%m-%d"))
pngname<-paste0(getwd(),"/magnitude_nega_weight/Dantzig_1_constraint_network_",1,"_lastday_.png")
png(file = pngname, width=900, height=350, bg = "transparent")
plot(magnitude_negative_weights)
dev.off()
magntd.nega.weights=c()
for (t in 1:61) {
weights=w_network_vary_with_phi_glasso[[1]][t,]
magntd.nega.weights[t]=sum(abs(weights[which(weights<0)]))/sum(abs(weights))
}
magnitude_negative_weights<-zoo(data.frame(magntd.nega.weights),
order.by=as.Date(as.character(date_monthly), format="%Y-%m-%d"))
pngname<-paste0(getwd(),"/magnitude_nega_weight/glasso_1_constraint_network_",1,"_lastday_.png")
png(file = pngname, width=900, height=350, bg = "transparent")
plot(magnitude_negative_weights)
dev.off()
