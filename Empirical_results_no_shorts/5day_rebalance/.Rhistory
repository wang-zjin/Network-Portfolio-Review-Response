selected_columns <- c("Dates","MSFT","AKAM","NLOK","INTU","AAPL","EBAY","ORCL","CSCO")
prices1<-prices[,selected_columns]
ZOO <- zoo(prices1[,-1], order.by=as.Date(as.character(prices$Dates), format='%Y-%m-%d'))
#return
return<- Return.calculate(ZOO, method="log")
return<- return[-1, ]
returnstd<-xts(return)
p=dim(return)[2]
# set label
node.label=colnames(returnstd)
names(returnstd) = node.label
# rolling window
W<-list()
for(t in 0: (floor((1857-500)/22)-1)){
W[[(t+1)]]=returnstd[(1+t*22):(522+t*22),]
}
W_in<-list()
W_out<-list()
for(t in 0: (floor((1857-500)/22)-1)){
W_in[[(t+1)]]=W[[t+1]][c(1:500),]
W_out[[(t+1)]]=W[[t+1]][c(501:522),]
}
T.windows<-length(W)
# correlation matrix, Expected return, covariance matrix
C_in <- list()
ER_in <- list()
COV_in <- list()
EC_in <- list()
for(t in 1: length(W_in)){
C_in[[(t)]] =cor(W_in[[(t)]])
ER_in[[(t)]] = colMeans(W_in[[(t)]])
COV_in[[(t)]] = cov(W_in[[(t)]])
network_port = network.correlation(W_in[[(t)]])
EC_in[[(t)]] <- eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector
max(eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector)
min(eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector)
boxplot(eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector)
}
C = C_in[[(1)]]
C[abs(C)<0.23] <-0
g <- graph_from_adjacency_matrix(C, mode = "undirected", weighted = TRUE, diag = FALSE)
eigen_centr = evcent(g)$vector
pngname<-paste0(getwd(),"/highcentrality_1_1",".png")
png(file = pngname, width=750, height=600, bg = "transparent")
plot(g, vertex.label = c(1:8), vertex.label.cex = 2,
vertex.size = eigen_centr*80, edge.width = E(g)$weight*20, layout = layout_in_circle )
dev.off()
sum(eigen_centr)
# In this file, we want to draw some network as simple examples.
# We want to choose 8 stock, and construct a network with high centrality, and construct another network with low centrality.
# By these two networks, we want to show stocks with high centrality are connected to more other stocks, while stocks with low centrality are connected to fewer stocks
setwd("~/同步空间/Network_structure_based_portfolio/Submission codes/Network 8-point example")
# Load Functions and other Files
source('./PackagesNetworkPortfolio.R')
source('./FunctionsNetworkPortfolio.R')
###### Low centrality network ######
prices<-read.csv("SP500 securities_up_20230306.csv")
selected_columns <- c("Dates","MSFT","AKAM","NLOK","KO","AAPL","EBAY","ORCL","PRU")
prices1<-prices[,selected_columns]
ZOO <- zoo(prices1[,-1], order.by=as.Date(as.character(prices$Dates), format='%Y-%m-%d'))
#return
return<- Return.calculate(ZOO, method="log")
return<- return[-1, ]
returnstd<-xts(return)
p=dim(return)[2]
# set label
node.label=colnames(returnstd)
names(returnstd) = node.label
# rolling window
W<-list()
for(t in 0: (floor((1857-500)/22)-1)){
W[[(t+1)]]=returnstd[(1+t*22):(522+t*22),]
}
W_in<-list()
W_out<-list()
for(t in 0: (floor((1857-500)/22)-1)){
W_in[[(t+1)]]=W[[t+1]][c(1:500),]
W_out[[(t+1)]]=W[[t+1]][c(501:522),]
}
T.windows<-length(W)
# correlation matrix, Expected return, covariance matrix
C_in <- list()
ER_in <- list()
COV_in <- list()
EC_in <- list()
for(t in 1: length(W_in)){
C_in[[(t)]] =cor(W_in[[(t)]])
ER_in[[(t)]] = colMeans(W_in[[(t)]])
COV_in[[(t)]] = cov(W_in[[(t)]])
network_port = network.correlation(W_in[[(t)]])
EC_in[[(t)]] <- eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector
max(eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector)
min(eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector)
boxplot(eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector)
}
C = C_in[[(1)]]
C[abs(C)<0.23] <-0
g <- graph_from_adjacency_matrix(C, mode = "undirected", weighted = TRUE, diag = FALSE)
eigen_centr = evcent(g)$vector
pngname<-paste0(getwd(),"/lowcentrality",".png")
png(file = pngname, width=750, height=600, bg = "transparent")
plot(g, vertex.label = c(1:8), vertex.label.cex = 2,
vertex.size = eigen_centr*80, edge.width = E(g)$weight*20, layout = layout_in_circle )
dev.off()
sum(eigen_centr)
###### High centrality network  ######
prices<-read.csv("SP500 securities_up_20230306.csv")
selected_columns <- c("Dates","MSFT","AKAM","NLOK","INTU","AAPL","EBAY","ORCL","CSCO")
prices1<-prices[,selected_columns]
ZOO <- zoo(prices1[,-1], order.by=as.Date(as.character(prices$Dates), format='%Y-%m-%d'))
#return
return<- Return.calculate(ZOO, method="log")
return<- return[-1, ]
returnstd<-xts(return)
p=dim(return)[2]
# set label
node.label=colnames(returnstd)
names(returnstd) = node.label
# rolling window
W<-list()
for(t in 0: (floor((1857-500)/22)-1)){
W[[(t+1)]]=returnstd[(1+t*22):(522+t*22),]
}
W_in<-list()
W_out<-list()
for(t in 0: (floor((1857-500)/22)-1)){
W_in[[(t+1)]]=W[[t+1]][c(1:500),]
W_out[[(t+1)]]=W[[t+1]][c(501:522),]
}
T.windows<-length(W)
# correlation matrix, Expected return, covariance matrix
C_in <- list()
ER_in <- list()
COV_in <- list()
EC_in <- list()
for(t in 1: length(W_in)){
C_in[[(t)]] =cor(W_in[[(t)]])
ER_in[[(t)]] = colMeans(W_in[[(t)]])
COV_in[[(t)]] = cov(W_in[[(t)]])
network_port = network.correlation(W_in[[(t)]])
EC_in[[(t)]] <- eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector
max(eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector)
min(eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector)
boxplot(eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector)
}
C = C_in[[(1)]]
C[abs(C)<0.23] <-0
g <- graph_from_adjacency_matrix(C, mode = "undirected", weighted = TRUE, diag = FALSE)
eigen_centr = evcent(g)$vector
pngname<-paste0(getwd(),"/highcentrality",".png")
png(file = pngname, width=750, height=600, bg = "transparent")
plot(g, vertex.label = c(1:8), vertex.label.cex = 2,
vertex.size = eigen_centr*80, edge.width = E(g)$weight*20, layout = layout_in_circle )
dev.off()
sum(eigen_centr)
# Clean the environment
graphics.off()
rm(list = ls(all = TRUE))
setwd("~/Documents/Code/Network_structure_based_portfolio/Submission codes/Possible_solution_Efficient_frontier")
setwd("~/Documents/Code/Network_structure_based_portfolio/Submission codes/Possible_solution_Efficient_frontier")
# Load Functions and other Files
source('./PackagesNetworkPortfolio.R')
source('./FunctionsNetworkPortfolio.R')
#Choose dataset to analyse
prices<-read_excel("SP500 securities.xlsx")
ZOO <- zoo(prices[,-1], order.by=as.Date(as.character(prices$Dates), format='%Y-%m-%d'))
#return
return<- Return.calculate(ZOO, method="log")
return<- return[-1, ]
returnstd<-xts(return)
# set label
node.label=colnames(returnstd)
node.label<-gsub("Equity","",node.label)
node.label<-gsub("UN","",node.label)
node.label<-gsub("UW","",node.label)
### Efficient frontier ###
er = colMeans(returnstd)
names(er) = node.label
evar = colSds(as.matrix(returnstd[sapply(returnstd, is.numeric)]))
names(evar) = node.label
covmat = cov(returnstd)
dimnames(covmat) = list(node.label, node.label)
r.free = 0.00005
# tangency portfolio
tan.port = tangency.portfolio(er, covmat, r.free)
# compute global minimum variance portfolio
gmin.port = globalMin.portfolio(er, covmat)
# compute portfolio frontier
ef  = efficient.frontier(er, covmat, alpha.min=-2,
alpha.max=1.5, nport=500)
# plot efficient frontier
pngname =  paste0("Efficient_frontiers.png")
png(file = pngname, width=1000, height=800, bg = "transparent")
plot(ef)
points(evar,  er, pch = 16)
dev.off()
# network of portfolio based on correlation matrix
network_port = network.portfolio(returnstd)
# plot efficient frontier
pngname =  paste0("Efficient_frontiers.png")
png(file = pngname, width=1000, height=800, bg = "transparent")
plot(ef)
points(evar,  er, pch = 16)
dev.off()
# network of portfolio based on correlation matrix
network_port = network.portfolio(returnstd)
# eigenvalue
ec_port2 <- eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector
# compute portfolio frontier of network
covmat = cov(returnstd)
net.ef  = network.efficient.frontier(ec_port2, covmat, alpha.min=-0.1,
alpha.max=2, nport=1000)
png(file = paste0("my2.png"), width=500, height=400, bg = "transparent")
print(p)
dev.off()
###  my1.png ####
xx=net.ef$sd
yy=net.ef$nc
d=cbind(as.data.frame(xx),as.data.frame(yy))
p<-ggplot(d, mapping = aes(xx, yy))+
geom_point(size=0.1)+
theme_bw()+
xlim(0.00445,0.00672)+
ylim(0.5,1.3)+
xlab("Standard deviation")+
ylab("Centrality")+
theme(axis.line = element_line(),
axis.text = element_text(size=20),
axis.title = element_text(size=30,face = "bold"),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
rect = element_rect(fill = "transparent"))
png("Efficient_frontier_my1_transparent.png", width = 800, height = 640, bg = "transparent")
p
dev.off()
###  my1.png ####
xx=net.ef$sd
yy=net.ef$nc
d=cbind(as.data.frame(xx),as.data.frame(yy))
p<-ggplot(d, mapping = aes(xx, yy))+
geom_point(size=0.1)+
theme_bw()+
xlim(0.00445,0.00672)+
ylim(0.5,1.3)+
xlab("Standard deviation")+
ylab("Centrality")+
theme(axis.line = element_line(),
axis.text = element_text(size=20),
axis.title = element_text(size=30,face = "bold"),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
rect = element_rect(fill = "transparent"))
png("Possible solution.png", width = 800, height = 640, bg = "transparent")
p
dev.off()
####  my4.png ####
xx=net.ef$sd
yy=net.ef$nc
d=cbind(as.data.frame(xx),as.data.frame(yy))
p<-ggplot(d[1:524,], mapping = aes(xx, yy))+
geom_point(size=0.1)+
theme_bw()+
xlim(0.00445,0.00672)+
ylim(0.5,1.3)+
xlab("Standard deviation")+
ylab("Centrality")+
theme(axis.line = element_line(),
axis.text = element_text(size=20),
axis.title = element_text(size=30,face = "bold"),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
rect = element_rect(fill = "transparent"))
png("Efficient_frontier_4_transparent.png", width = 800, height = 640, bg = "transparent")
p
dev.off()
###  my1.png ####
xx=net.ef$sd
yy=net.ef$nc
d=cbind(as.data.frame(xx),as.data.frame(yy))
p<-ggplot(d, mapping = aes(xx, yy))+
geom_point(size=0.1)+
theme_bw()+
xlim(0.00445,0.00672)+
ylim(0.5,1.3)+
xlab("Standard deviation")+
ylab("Centrality")+
theme(axis.line = element_line(),
axis.text = element_text(size=20),
axis.title = element_text(size=30,face = "bold"),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
rect = element_rect(fill = "transparent"))
png("Possible solution.png", width = 800, height = 640, bg = "transparent")
p
dev.off()
####  my4.png ####
xx=net.ef$sd
yy=net.ef$nc
d=cbind(as.data.frame(xx),as.data.frame(yy))
p<-ggplot(d[1:524,], mapping = aes(xx, yy))+
geom_point(size=0.1)+
theme_bw()+
xlim(0.00445,0.00672)+
ylim(0.5,1.3)+
xlab("Standard deviation")+
ylab("Centrality")+
theme(axis.line = element_line(),
axis.text = element_text(size=20),
axis.title = element_text(size=30,face = "bold"),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
rect = element_rect(fill = "transparent"))
png("Efficient_frontier.png", width = 800, height = 640, bg = "transparent")
p
dev.off()
xx=net.ef$sd
yy=net.ef$nc
d=cbind(as.data.frame(xx),as.data.frame(yy))
d[order(d$yy, decreasing = TRUE), ]
d_move=data_frame()
for (i in seq(1,0,-0.02)) {
net.ef1<-network.efficient.frontier.moving(ec_port2, covmat, alpha=i)
xx=net.ef1$sd
yy=net.ef1$nc
d_move=rbind(d1,cbind(as.data.frame(xx),as.data.frame(yy)))
}
# Clean the environment
graphics.off()
rm(list = ls(all = TRUE))
setwd("~/Documents/Code/Network_structure_based_portfolio/Submission codes/Possible_solution_Efficient_frontier")
# Load Functions and other Files
source('./PackagesNetworkPortfolio.R')
source('./FunctionsNetworkPortfolio.R')
#Choose dataset to analyse
prices<-read_excel("SP500 securities.xlsx")
ZOO <- zoo(prices[,-1], order.by=as.Date(as.character(prices$Dates), format='%Y-%m-%d'))
#return
return<- Return.calculate(ZOO, method="log")
return<- return[-1, ]
returnstd<-xts(return)
# set label
node.label=colnames(returnstd)
node.label<-gsub("Equity","",node.label)
node.label<-gsub("UN","",node.label)
node.label<-gsub("UW","",node.label)
### Efficient frontier ###
er = colMeans(returnstd)
names(er) = node.label
evar = colSds(as.matrix(returnstd[sapply(returnstd, is.numeric)]))
names(evar) = node.label
covmat = cov(returnstd)
dimnames(covmat) = list(node.label, node.label)
r.free = 0.00005
# tangency portfolio
tan.port = tangency.portfolio(er, covmat, r.free)
# compute global minimum variance portfolio
gmin.port = globalMin.portfolio(er, covmat)
# compute portfolio frontier
ef  = efficient.frontier(er, covmat, alpha.min=-2,
alpha.max=1.5, nport=500)
# network of portfolio based on correlation matrix
network_port = network.portfolio(returnstd)
# eigenvalue
ec_port2 <- eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector
# compute portfolio frontier of network
covmat = cov(returnstd)
net.ef  = network.efficient.frontier(ec_port2, covmat, alpha.min=-0.1,
alpha.max=2, nport=1000)
###  Possible solution.png ####
xx=net.ef$sd
yy=net.ef$nc
d=cbind(as.data.frame(xx),as.data.frame(yy))
p<-ggplot(d, mapping = aes(xx, yy))+
geom_point(size=0.1)+
theme_bw()+
xlim(0.00445,0.00672)+
ylim(0.5,1.3)+
xlab("Standard deviation")+
ylab("Centrality")+
theme(axis.line = element_line(),
axis.text = element_text(size=20),
axis.title = element_text(size=30,face = "bold"),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
rect = element_rect(fill = "transparent"))
png("Possible solution.png", width = 800, height = 640, bg = "transparent")
p
dev.off()
####  Efficient frontier.png ####
xx=net.ef$sd
yy=net.ef$nc
d=cbind(as.data.frame(xx),as.data.frame(yy))
p<-ggplot(d[1:524,], mapping = aes(xx, yy))+
geom_point(size=0.1)+
theme_bw()+
xlim(0.00445,0.00672)+
ylim(0.5,1.3)+
xlab("Standard deviation")+
ylab("Centrality")+
theme(axis.line = element_line(),
axis.text = element_text(size=20),
axis.title = element_text(size=30,face = "bold"),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
rect = element_rect(fill = "transparent"))
png("Efficient_frontier.png", width = 800, height = 640, bg = "transparent")
p
dev.off()
rm(list = ls())
setwd("~/Documents/Code/Network_structure_based_portfolio/Submission codes/Empirical/5day_rebalance")
# Load Functions and other Files
source('./PackagesNetworkPortfolio.R')
source('./FunctionsNetworkPortfolio.R')
# load data
prices<-read.csv("SP500 securities_up_20230306.csv")
prices<-prices[1:1858,]
ZOO <- zoo(prices[,-1], order.by=as.Date(as.character(prices$Dates), format='%Y-%m-%d'))
#return
return<- Return.calculate(ZOO, method="log")
return<- return[-1, ]
returnstd<-xts(return)
p=dim(return)[2]
# set label
node.label=colnames(returnstd)
names(returnstd) = node.label
# rolling window
W<-list()
for(t in 0: (floor((1857-500)/5)-1)){
W[[(t+1)]]=returnstd[(1+t*5):(505+t*5),]
}
W_in<-list()
W_out<-list()
for(t in 0: (floor((1857-500)/5)-1)){
W_in[[(t+1)]]=W[[t+1]][c(1:500),]
W_out[[(t+1)]]=W[[t+1]][c(501:505),]
}
T.windows<-length(W)
# correlation matrix, Expected return, covariance matrix
C_in <- list()
ER_in <- list()
COV_in <- list()
EC_in <- list()
for(t in 1: length(W_in)){
C_in[[(t)]] =cor(W_in[[(t)]])
ER_in[[(t)]] = colMeans(W_in[[(t)]])
COV_in[[(t)]] = cov(W_in[[(t)]])
network_port = network.correlation(W_in[[(t)]])
EC_in[[(t)]] <- eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector
max(eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector)
min(eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector)
boxplot(eigen_centrality(network_port,directed = FALSE, scale = TRUE)$vector)
}
###### CV for tuning lambda in estimation eigenvector centrality using the first 500 data ######
n<-dim(returnstd[1:500,])[1]
B=100
n.block=floor(n/B)
block.start=1+(0:(n.block-1))*B
lmd.i=c()
for (valid.block in 1:n.block) {
valid.ind=NULL
for(k in valid.block){
valid.ind=c(valid.ind,block.start[k]:(min(block.start[k]+B-1,n)))
}
n.valid=length(valid.ind)
train.ind=setdiff(1:n,valid.ind)
n.train=length(train.ind)
returnstd.train=returnstd[1:500,][train.ind,]
returnstd.valid=returnstd[1:500,][valid.ind,]
mu.train=rep(0,p)
mu.valid=rep(0,p)
A.train=cor(returnstd.train)-diag(1,p,p)
A.valid=cor(returnstd.valid)-diag(1,p,p)
cov.train=A.train-diag(max(eigen(A.train)$value),p,p)
cov.valid=A.valid-diag(max(eigen(A.valid)$value),p,p)
lambda.grid=seq(0,1,length=101)[2:101]
l.lambda=length(lambda.grid)
cv.l.error=NULL
cv.l.lmd=NULL
for(i in 1:l.lambda){
lmd=lambda.grid[i]
print(i)
lin.train=linfun3(cov.train,mu.train,lmd,abs(eigen(cov.valid)$vector[1,1]))
if(!(all(lin.train==0))){
error=sum((cov.valid%*%lin.train-mu.valid)^2)
cv.l.error=c(cv.l.error,error)
cv.l.lmd=c(cv.l.lmd, lmd)
}
}
lmd.i[valid.block]=min(cv.l.lmd[which(cv.l.error==min(cv.l.error))])
}
lmd=mean(lmd.i)
